/* automatically generated by rust-bindgen */

pub type __int16_t = ::std::os::raw::c_short;
pub type __int32_t = ::std::os::raw::c_int;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _
                as usize
        },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize
        },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
extern "C" {
    pub fn tvm_fopen(
        filename: *const ::std::os::raw::c_char,
        extension: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn tvm_fcopy(
        dest: *mut ::std::os::raw::c_char,
        size: usize,
        src: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tvm_flength(f: *mut FILE) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tvm_htab_node {
    pub key: *mut ::std::os::raw::c_char,
    pub value: ::std::os::raw::c_int,
    pub valptr: *mut ::std::os::raw::c_void,
    pub next: *mut tvm_htab_node,
}
#[test]
fn bindgen_test_layout_tvm_htab_node() {
    assert_eq!(
        ::std::mem::size_of::<tvm_htab_node>(),
        32usize,
        concat!("Size of: ", stringify!(tvm_htab_node))
    );
    assert_eq!(
        ::std::mem::align_of::<tvm_htab_node>(),
        8usize,
        concat!("Alignment of ", stringify!(tvm_htab_node))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_htab_node>())).key as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_htab_node),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_htab_node>())).value as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_htab_node),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_htab_node>())).valptr as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_htab_node),
            "::",
            stringify!(valptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_htab_node>())).next as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_htab_node),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tvm_htab_ctx {
    pub num_nodes: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
    pub nodes: *mut *mut tvm_htab_node,
}
#[test]
fn bindgen_test_layout_tvm_htab_ctx() {
    assert_eq!(
        ::std::mem::size_of::<tvm_htab_ctx>(),
        16usize,
        concat!("Size of: ", stringify!(tvm_htab_ctx))
    );
    assert_eq!(
        ::std::mem::align_of::<tvm_htab_ctx>(),
        8usize,
        concat!("Alignment of ", stringify!(tvm_htab_ctx))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_htab_ctx>())).num_nodes as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_htab_ctx),
            "::",
            stringify!(num_nodes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_htab_ctx>())).size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_htab_ctx),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_htab_ctx>())).nodes as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_htab_ctx),
            "::",
            stringify!(nodes)
        )
    );
}
extern "C" {
    pub fn tvm_htab_create() -> *mut tvm_htab_ctx;
}
extern "C" {
    pub fn tvm_htab_destroy(htab: *mut tvm_htab_ctx);
}
extern "C" {
    pub fn tvm_htab_add(
        htab: *mut tvm_htab_ctx,
        key: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tvm_htab_add_ref(
        htab: *mut tvm_htab_ctx,
        key: *const ::std::os::raw::c_char,
        valptr: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tvm_htab_find(
        htab: *mut tvm_htab_ctx,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tvm_htab_find_ref(
        htab: *mut tvm_htab_ctx,
        key: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tvm_preprocess(
        src: *mut *mut ::std::os::raw::c_char,
        src_len: *mut ::std::os::raw::c_int,
        defines: *mut tvm_htab_ctx,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tvm_reg_u {
    pub i32: i32,
    pub i32_ptr: *mut i32,
    pub i16: tvm_reg_u__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tvm_reg_u__bindgen_ty_1 {
    pub h: i16,
    pub l: i16,
    _bindgen_union_align: u16,
}
#[test]
fn bindgen_test_layout_tvm_reg_u__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<tvm_reg_u__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(tvm_reg_u__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<tvm_reg_u__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(tvm_reg_u__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_reg_u__bindgen_ty_1>())).h as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_reg_u__bindgen_ty_1),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_reg_u__bindgen_ty_1>())).l as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_reg_u__bindgen_ty_1),
            "::",
            stringify!(l)
        )
    );
}
#[test]
fn bindgen_test_layout_tvm_reg_u() {
    assert_eq!(
        ::std::mem::size_of::<tvm_reg_u>(),
        8usize,
        concat!("Size of: ", stringify!(tvm_reg_u))
    );
    assert_eq!(
        ::std::mem::align_of::<tvm_reg_u>(),
        8usize,
        concat!("Alignment of ", stringify!(tvm_reg_u))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_reg_u>())).i32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_reg_u),
            "::",
            stringify!(i32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_reg_u>())).i32_ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_reg_u),
            "::",
            stringify!(i32_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_reg_u>())).i16 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_reg_u),
            "::",
            stringify!(i16)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tvm_mem {
    pub FLAGS: ::std::os::raw::c_int,
    pub remainder: ::std::os::raw::c_int,
    pub mem_space: *mut ::std::os::raw::c_void,
    pub mem_space_size: ::std::os::raw::c_int,
    pub registers: *mut tvm_reg_u,
}
#[test]
fn bindgen_test_layout_tvm_mem() {
    assert_eq!(
        ::std::mem::size_of::<tvm_mem>(),
        32usize,
        concat!("Size of: ", stringify!(tvm_mem))
    );
    assert_eq!(
        ::std::mem::align_of::<tvm_mem>(),
        8usize,
        concat!("Alignment of ", stringify!(tvm_mem))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_mem>())).FLAGS as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_mem),
            "::",
            stringify!(FLAGS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_mem>())).remainder as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_mem),
            "::",
            stringify!(remainder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_mem>())).mem_space as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_mem),
            "::",
            stringify!(mem_space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_mem>())).mem_space_size as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_mem),
            "::",
            stringify!(mem_space_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_mem>())).registers as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_mem),
            "::",
            stringify!(registers)
        )
    );
}
extern "C" {
    pub fn tvm_mem_create(size: usize) -> *mut tvm_mem;
}
extern "C" {
    pub fn tvm_mem_destroy(mem: *mut tvm_mem);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tvm_prog {
    pub start: ::std::os::raw::c_int,
    pub num_instr: ::std::os::raw::c_int,
    pub instr: *mut ::std::os::raw::c_int,
    pub args: *mut *mut *mut ::std::os::raw::c_int,
    pub values: *mut *mut ::std::os::raw::c_int,
    pub num_values: ::std::os::raw::c_int,
    pub defines: *mut tvm_htab_ctx,
    pub label_htab: *mut tvm_htab_ctx,
}
#[test]
fn bindgen_test_layout_tvm_prog() {
    assert_eq!(
        ::std::mem::size_of::<tvm_prog>(),
        56usize,
        concat!("Size of: ", stringify!(tvm_prog))
    );
    assert_eq!(
        ::std::mem::align_of::<tvm_prog>(),
        8usize,
        concat!("Alignment of ", stringify!(tvm_prog))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_prog>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_prog),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_prog>())).num_instr as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_prog),
            "::",
            stringify!(num_instr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_prog>())).instr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_prog),
            "::",
            stringify!(instr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_prog>())).args as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_prog),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_prog>())).values as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_prog),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_prog>())).num_values as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_prog),
            "::",
            stringify!(num_values)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_prog>())).defines as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_prog),
            "::",
            stringify!(defines)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_prog>())).label_htab as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_prog),
            "::",
            stringify!(label_htab)
        )
    );
}
extern "C" {
    pub fn tvm_prog_create() -> *mut tvm_prog;
}
extern "C" {
    pub fn tvm_prog_destroy(p: *mut tvm_prog);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tvm_ctx {
    pub prog: *mut tvm_prog,
    pub mem: *mut tvm_mem,
}
#[test]
fn bindgen_test_layout_tvm_ctx() {
    assert_eq!(
        ::std::mem::size_of::<tvm_ctx>(),
        16usize,
        concat!("Size of: ", stringify!(tvm_ctx))
    );
    assert_eq!(
        ::std::mem::align_of::<tvm_ctx>(),
        8usize,
        concat!("Alignment of ", stringify!(tvm_ctx))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tvm_ctx>())).prog as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_ctx),
            "::",
            stringify!(prog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tvm_ctx>())).mem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tvm_ctx),
            "::",
            stringify!(mem)
        )
    );
}
extern "C" {
    pub fn tvm_vm_create() -> *mut tvm_ctx;
}
extern "C" {
    pub fn tvm_vm_destroy(vm: *mut tvm_ctx);
}
extern "C" {
    pub fn tvm_vm_interpret(
        vm: *mut tvm_ctx,
        filename: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tvm_vm_run(vm: *mut tvm_ctx);
}
